/* global window, jQuery, THREE */$(document).ready(function(){	var scene, camera, renderer, light,light2, controls;	var wheel1, wheel2, wheel3, wheel4, deck, truck1, truck2, model;	var skateboard = new THREE.Object3D();	var canvasWidth = $('.webGLContainer').width();	var canvasHeight = $('.webGLContainer').height();	var object = new THREE.Object3D();	var currentColor, currentMaterial;	var loader, modelURL, modelGroup; //for collada import	var arrObjects = [];	var arrModel = [];  init();	animate();/* *  creating all objects in threejs scene *  @param void *  @return void **/function init(){	// add scene-basics  scene = new THREE.Scene();  addCamera();  addControls();  addLight();	addRenderer();  addColorPads();	// Axis Helper	var axisHelper = new THREE.AxisHelper(1000);	// add objects  load3DModel();}/* *  rendering the scene and relocate the light according to camera position *  @param void *  @return void **/function animate(){	requestAnimationFrame(animate);  light.position.set(camera.position.x, camera.position.y, camera.position.z);	renderer.render(scene, camera);}/******************************************* basic scene elements ******************************************//* *  creating camera that looks at center of scene, adding camera to scene *  @param void *  @return void **/function addCamera(){  camera = new THREE.PerspectiveCamera(45, canvasWidth/canvasHeight, 0.1, 10000);	camera.position.set(500,40,600);	camera.lookAt(scene.position);	scene.add(camera);}/* *  creating camera controls, intialy disabled, only activate when mouse is over webGLContainer *  @param void *  @return void **/function addControls(){    controls = new THREE.OrbitControls(camera);    //controls.addEventListener( 'change', animate );    controls.enabled = false;    $('.webGLContainer').mouseover(function(){            controls.enabled = true;    });    $('.webGLContainer').mouseout(function(){        controls.enabled = false;    });}/* *  create directionalLight to scene, position = camera position, add to scene *  @param void *  @return void **/function addLight(){    light = new THREE.DirectionalLight(0xffffff, 1);    light.position.set(camera.position.x, camera.position.y,camera.position.z);    scene.add( light );}/* *  create renderer, WebGLRenderer uses GPU, append to webGLContainer in HTML structur *  @param void *  @return void **/function addRenderer(){    renderer = new THREE.WebGLRenderer({antialias: true});	renderer.setSize(canvasWidth,canvasHeight);	renderer.setClearColor(0xffffff,1);    $(".webGLContainer").append(renderer.domElement);}/****** colorpads are not included in the webGL-scene but to each select-field for the attributes ******** *//* *  creating color pads from configurable attribute, append color pads to attributes for model selection *  @param void *  @return void **/function addColorPads(){        var arrColor = [];        $('.options .Farbe select option').each(function(){            arrColor.push($(this).val());        });				$('.options').children().not('.Farbe').not('.Material').each(function(){            var html = "<div class='color-container clearfix'>";                $.each(arrColor, function(){                    html += "<div class='color' id='"+this+"' style='background:#"+this.slice(2,8)+"'></div>"                });                html += "</div>";            $(this).append(html);        });}/*---------------------------------------------------------------------------------------------------------*//**************************************** 3d models ********************************************************//* *  loading collada-models into scene, place and rotate them, so that they form the skateboard *  each collada-model is loaded seperately, identified by colladaId *  grouping models on one object *  adding object to scene *  @param void *  @return void **/function load3DModel(){    arrObjects = getObjects();		$.each(arrObjects, function(){			loader = new THREE.ColladaLoader();			loader.options.convertUpAxis = true;			loader.load(this, function(collada){			modelGroup = collada.scene;      model = modelGroup.children[modelGroup.children.length-1];      if(model.colladaId == 'SKATEBOARD_DECK'){ // 14 = skateboard_deck      //if(model.id == '14'){          var deckGeo = model.children[0].geometry;          var deckMat = model.children[0].material;          deck = new THREE.Mesh(deckGeo, deckMat);          //deck.material.color.setHex(0x000000);          deck.name = 'skateboard';				deck.position.set(0,0,0);                  deck.rotation.x = Math.PI/2;				object.add(deck);			}			else if(model.colladaId == 'longboard_wheel_70mm'){			//else if(model.id == '39'){				// wheel1 = FL, wheel2 = FR, wheel3 = RL, wheel4 = RR        var wheelGeo = model.children[0].geometry;        var wheelMat = model.children[0].material;        wheel1 = new THREE.Mesh(wheelGeo, wheelMat);        wheel1.name = 'skateboard';				//wheel1.material.color.setHex(0x000000);				wheel1.position.set(90,-63,225);				wheel1.rotation.z = Math.PI/2;				wheel2 = new THREE.Mesh(wheelGeo, wheelMat);				wheel2.position.set(-90,-58,225);				wheel2.rotation.z = -Math.PI/2;				wheel3 = new THREE.Mesh(wheelGeo, wheelMat);				wheel3.position.set(90,-63,-220);				wheel3.rotation.z = Math.PI/2;				wheel4 = new THREE.Mesh(wheelGeo, wheelMat);				wheel4.position.set(-90,-58,-220);				wheel4.rotation.z = -Math.PI/2;				object.add(wheel1);				object.add(wheel2);				object.add(wheel3);				object.add(wheel4);			}			else if(model.colladaId == 'Truckss'){			//else if(model.id == '131'){				var truckGeo = model.children[0].geometry;                  var truckMat = model.children[0].material;                  truck1 = new THREE.Mesh(truckGeo, truckMat);				truck1.name = 'skateboard';				//truck1.material.color.setHex(0xff0000);                  truck1.position.set(-75,-10,210);				truck1.rotation.z = Math.PI/2;				truck1.rotation.y = Math.PI;                  truck1.rotation.x = Math.PI/2;				truck2 = new THREE.Mesh(truckGeo, truckMat);				truck2.position.set(75,-10,-210);				truck2.rotation.x = Math.PI/2;				truck2.rotation.y = Math.PI;				truck2.rotation.z = -Math.PI/2;				object.add(truck1);				object.add(truck2);			}		});	});	scene.add(object);}/*---------------------------------------------------------------------------------------------------------*//**************************************** get 3d models ****************************************************//* *  get paths to collada files when page is loaded *  put values of selected attribute options in array *  values represent paths to current models *  @param void *  @return array arrHelper **/function getObjects(){		var arrHelper = [];		$('.options div[class^="3D"]').each(function(){				arrHelper.push($(this).find('option:selected').val());		});		return arrHelper;}/*---------------------------------------------------------------------------------------------------------*//************************* change 3d models after configuration was changed ********************************//* *  function called when selection of deck changes *  remove former 3D-Model of deck and replace by new one *  load new collada by url that represents path to collada file *  add new deck to grouping object *  placing deck in scene and according to type of deck and truck its other parts *  @param string url *  @return void **/function changeDeck(url){    var color = object.children[0].material.color;    object.remove(object.children[0]);    loader = new THREE.ColladaLoader();	loader.options.convertUpAxis = true;	loader.load(url, function(collada){		modelGroup = collada.scene;        model = modelGroup.children[modelGroup.children.length-1].children[0];        var deckGeo = model.geometry;        var deckMat = model.material;        deck = new THREE.Mesh(deckGeo, deckMat);        deck.material.color.setRGB(color.r, color.g, color.b);		if(url.indexOf('longboard') > 0){ // is the selected option longboar            deck.name = 'longboard';			deck.position.set(-115,0,-600);			deck.rotation.y = -Math.PI/2;     	    object.children.splice(0,0,deck);            if(object.children[5].name == 'skateboard'){                fitTo(110,75,530,75,25,530);            }            else{                fitTo(110, 68, 540, 0, 55, 530);            }        }		else if(url.indexOf('skateboard') > 0){			deck.name = 'skateboard';            deck.position.set(0,0,0);			deck.rotation.x = Math.PI/2;			object.children.splice(0,0,deck);            if(object.children[5].name == 'skateboard'){                 fitTo(90,63,225,75,10,210);            }            else{                fitTo(95,55,225,0,40,210);            }		}	});}/* *  function called when selection of wheel changes *  remove former 3D-Model of wheels and replace by new one *  load new collada by url that represents path to collada file *  copy 3D-Model of wheel to lower data volume *  add new wheels to grouping object *  placing wheels according to type of deck an truck *  @param string url *  @return void **/function changeWheel(url){    var color = object.children[1].material.color;    object.children.splice(1,4);    loader = new THREE.ColladaLoader();    loader.options.convertUpAxis = true;    loader.load(url, function(collada){        modelGroup = collada.scene;        model = modelGroup.children[modelGroup.children.length-1].children[0];        var wheelGeo = model.geometry;        var wheelMat = model.material;        wheel1 = new THREE.Mesh(wheelGeo, wheelMat);        wheel1.material.color.setRGB(color.r, color.g, color.b);        wheel2 = new THREE.Mesh(wheelGeo, wheelMat);        wheel3 = new THREE.Mesh(wheelGeo, wheelMat);        wheel4 = new THREE.Mesh(wheelGeo, wheelMat);        if(url.indexOf('longboard')>0){            wheel1.name = 'longboard';            wheel1.rotation.z = -Math.PI/2;            wheel1.rotation.y = -Math.PI/128;            wheel2.rotation.z = Math.PI/2;            wheel2.rotation.y = Math.PI/128;            wheel3.rotation.z = -Math.PI/2;            wheel3.rotation.y = -Math.PI/128;            wheel4.rotation.z = Math.PI/2;            wheel4.rotation.y = Math.PI/128;            object.children.splice(1,0, wheel1, wheel2, wheel3, wheel4);            if(object.children[0].name == 'skateboard'){                if(object.children[5].name == 'skateboard'){                    fitTo(90,63,225,75,10,210);                }                else{                    fitTo(110,53,220,0,40,210);                }            }            else{                if(object.children[5].name == 'skateboard'){                    fitTo(90, 80, 545, 75, 25, 530);                }                else{                    fitTo(110, 68, 540,0, 55, 530);                }            }        }        else if(url.indexOf('skateboard')>0){        	wheel1.name = 'skateboard';            wheel1.rotation.z = Math.PI/2;            wheel2.rotation.z = -Math.PI/2;            wheel3.rotation.z = Math.PI/2;            wheel4.rotation.z = -Math.PI/2;            object.children.splice(1,0, wheel1, wheel2, wheel3, wheel4);            if(object.children[0].name == 'skateboard'){                if(object.children[5].name == 'skateboard'){                    fitTo(90,63,225,75,10,210);                }                else{                    fitTo(110,53,220,0,40,210);                }            }            else{                if(object.children[5].name == 'skateboard'){                    fitTo(90, 80, 545, 75, 25, 530);                }                else{                    fitTo(110,68,545,0,55,530);                }            }        }    });}/* *  function called when selection of truck changes *  remove former 3D-Model of trucks and replace by new one *  load new collada by url that represents path to collada file *  copy 3D-Model of truck to lower data volume *  add new trucks to grouping object *  placing trucks in scene and according to type of deck *  @param string url *  @return void **/function changeTruck(url){    var color = object.children[5].material.color;    object.children.splice(5,6);    loader = new THREE.ColladaLoader();    loader.options.convertUpAxis = true;    loader.load(url, function(collada){        modelGroup = collada.scene;        model = modelGroup.children[modelGroup.children.length-1].children[0];       var truckGeo = model.geometry;        var truckMat = model.material;        truck1 = new THREE.Mesh(truckGeo, truckMat);        truck2 = new THREE.Mesh(truckGeo, truckMat);        truck1.material.color.setRGB(color.r, color.g, color.b);        if(url.indexOf('longboard')>0){            truck1.name = 'longboard';            truck1.rotation.x = Math.PI*0.265;            truck2.rotation.x = Math.PI*0.735;             truck1.rotation.z = Math.PI;            object.children.splice(5,6, truck1, truck2);            if(object.children[0].name == 'skateboard'){                fitTo(110,53,220,0,40,210);            }            else{                fitTo(110, 68, 540, 0, 55, 530);            }        }        if(url.indexOf('skateboard')>0){             truck1.name = 'skateboard';             truck1.scale.set(1,1,1);             truck1.rotation.z = Math.PI/2;             truck1.rotation.y = Math.PI;             truck1.rotation.x = Math.PI/2;             truck2.rotation.x = Math.PI/2;			 truck2.rotation.y = Math.PI;			 truck2.rotation.z = -Math.PI/2             object.children.splice(5,6, truck1, truck2);             if(object.children[0].name == 'skateboard'){                fitTo(90,63,225,75,10,210);             }             else{                fitTo(90, 80, 545, 75, 25, 530);             }        }    });}/* *  placing each child of object in scene *  address each child by its index inside object *  @param int wheelX *  @param int wheelY *  @param int wheelZ *  @param int truckX *  @param int truckY *  @param int truckZ *  @return void **/function fitTo(wheelX, wheelY, wheelZ, truckX, truckY, truckZ){  object.children[1].position.set(wheelX,-wheelY, wheelZ);       //wheel1	object.children[2].position.set(-wheelX,-wheelY+5, wheelZ);      //wheel2	object.children[3].position.set(wheelX,-wheelY,-wheelZ+15);       //wheel3	object.children[4].position.set(-wheelX,-wheelY+5,-wheelZ+15);      //wheel4	object.children[5].position.set(-truckX,-truckY, truckZ);      //truck1	object.children[6].position.set(truckX,-truckY, -truckZ+15);      //truck2}/*---------------------------------------------------------------------------------------------------------*//***************************** check for change of configuration *******************************************//* *  if selection of any attribute changes call suitable function with *  detect value of selected option *  detect name of changed attribute by class name of parent div of selected option *  call suited function with value of selected option *  @param void *  @return void **/$('select').change(function(){    attributeValue = $(this).val();    attributeName = $(this).parent().parent().attr('class');    if(attributeName == '3D-Model-Deck'){changeDeck(attributeValue);}    else if(attributeName == '3D-Model-Wheel'){changeWheel(attributeValue);}    else if(attributeName == '3D-Model-Achse'){changeTruck(attributeValue);}});/***********************************************************************************************************//*************************************** scene controls ****************************************************/$('.control.frontal').click(function(){	camera.position.set(0,0,1000);	camera.lookAt(scene.position);});$('.control.bird').click(function(){	camera.position.set(0,-1000,0);	camera.lookAt(scene.position);});$('.control.side').click(function(){	camera.position.set(1000,0,0);    camera.lookAt(scene.position);});$('.control.iso').click(function(){	camera.position.set(500,40,600);	camera.lookAt(scene.position);});/*---------------------------------------------------------------------------------------------------------*//* *  detect change of color selection *  detect name of 3D-Model that the changed color selection belongs to *  set color value of element depending on name of 3D-Model *  @param void *  @return void **/$('.color').click(function(){   var currentObject = $(this).parent().parent().attr('class');   if(currentObject == '3D-Model-Deck'){       object.children[0].material.color.setHex($(this).attr('id'));   }   else if(currentObject == '3D-Model-Wheel'){        object.children[1].material.color.setHex($(this).attr('id'));        object.children[2].material.color.setHex($(this).attr('id'));        object.children[3].material.color.setHex($(this).attr('id'));        object.children[4].material.color.setHex($(this).attr('id'));   }    else if(currentObject == '3D-Model-Achse'){        object.children[5].material.color.setHex($(this).attr('id'));        object.children[6].material.color.setHex($(this).attr('id'));    }});/* *  detect change of material selection *  detect name of 3D-Model that the changed material selection belongs to *  set new material value of element depending on name of 3D-Model *  @param void *  @return void **/$('.shiny').click(function(){    var currentObject = $(this).parent().parent().attr('class');    if(currentObject  == '3D-Model_Deck'){       var currentColor = object.children[0].material.color;       object.children[0].material = new THREE.MeshPhongMaterial({color: currentColor});    }    else if(currentObject == '3D-Model-Wheel'){        var currentColor = object.children[1].material.color;        object.children[1].material = new THREE.MeshPhongMaterial({color: currentColor});        object.children[2].material = new THREE.MeshPhongMaterial({color: currentColor});        object.children[3].material = new THREE.MeshPhongMaterial({color: currentColor});        object.children[4].material = new THREE.MeshPhongMaterial({color: currentColor});    }    else if(currentObject == '3D-Model-Achse'){        var currentColor = object.children[5].material.color;        object.children[5].material = new THREE.MeshPhongMaterial({ color: currentColor});        object.children[6].material = new THREE.MeshPhongMaterial({ color: currentColor});        }});/* *  detect change of material selection *  detect name of 3D-Model that the changed material selection belongs to *  set new material value of element depending on name of 3D-Model *  @param void *  @return void **/$('.matt').click(function(){    var currentObject = $(this).parent().parent().attr('class');    if(currentObject  == '3D-Model_Deck'){       var currentColor = object.children[0].material.color;       object.children[0].material = new THREE.MeshLambertMaterial({color: currentColor});    }    else if(currentObject == '3D-Model-Wheel'){        var currentColor = object.children[1].material.color;        object.children[1].material = new THREE.MeshLambertMaterial({color: currentColor});        object.children[2].material = new THREE.MeshLambertMaterial({color: currentColor});        object.children[3].material = new THREE.MeshLambertMaterial({color: currentColor});        object.children[4].material = new THREE.MeshLambertMaterial({color: currentColor});    }    else if(currentObject == '3D-Model-Achse'){        var currentColor = object.children[5].material.color;        object.children[5].material = new THREE.MeshLambertMaterial({color: currentColor});        object.children[6].material = new THREE.MeshLambertMaterial({color: currentColor});    }});});